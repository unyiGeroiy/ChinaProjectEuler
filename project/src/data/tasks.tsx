export interface Task {
  id: number;
  title: string;
  text: string;
  answer: number|string;
  description: string;
}

export const tasks: Task[] = [
  { id: 1, title: "Multiples of 3 or 5", 
    text: " If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.",
    answer: '233168', description: `
let summi = 0;
for(let i=0; i<1000; i++){
  if (i%3 === 0 || i%5 === 0){
    summi += i;
  }
}

console.log(summi);
`
  },
  { id: 2, title: "Even Fibonacci Numbers",
    text: 'Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.',
    answer: '4613732', description: `let f = 0;
let i = 1;
let j = 0;
let summ = 0;
while(j<4000000){
  f = j+i;
  if(f%2==0){
    summ += f;
  }
  j = i;
  i = f;
}

console.log(summ); ` 

  },
  { id: 3, title: "Largest Prime Factor", 
    text: 'The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143?', 
    answer: '6857', description: `function prostoe(num: number){
  if (num == 2){
    return true;
  }
  if (num%2==0){
    return false;
  }
  if (num == 1){
    return false;
  }

  for(let i = 3; i<=Math.sqrt(num); i+=2){
    if(num%i==0){
      return false;
    }
  }
  return true;
}

for(let i = 3; i<600851475143/2; i+=2){
  if(prostoe(i)){
    if(600851475143%i==0){
      console.log(i);
    }
  }
}

`

  },
  { id: 4, title: "Largest Prime Factor", 
    text: 'A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers.', 
    answer: '906609', description: `let big = 0;
for(let i = 999; i>0; i--){
  for(let j = 999; j>0; j--){
    let prod = i*j;
    let numb = Array.from(String(prod));
    let len = numb.length;
    let st1 = '';
    let st2 = '';
    for(let l = 0; l<len/2; l++){
      st1 += numb[l];
    }
    for(let l = len-1; l>=len/2; l--){
      st2 += numb[l];
    }
    if (st1 == st2 && prod > big){
      big = prod;
    }
  }
}

console.log(big);
`

  },
  { id: 5, title: "Smallest Multiple", 
    text: '2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?', 
    answer: '232792560', description: `let flag = true;
let cntn = 0;
for(let i = 2520; flag != false; i++){
  for(let j = 1; j<21; j++){
    if(i%j!=0){
      break;
    }
    cntn += 1;
    if(cntn == 20){
      console.log(i);
      flag = false;
    }
  }
  cntn = 0;
}`

  },
  { id: 6, title: "Sum Square Difference", 
    text: 'The sum of the squares of the first ten natural numbers is, 1² + 2² + ... + 10² = 385 The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)² = 55² = 3025 Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.', 
    answer: '25164150', description: `let su = 0;
let sqrtsum = 0;

for(let i = 1; i<101; i++){
  su += i**2;
  sqrtsum += i;
}

console.log(sqrtsum**2-su)`

  },
  { id: 7, title: "10 001st Prime", 
    text: 'By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 10001st prime number?', 
    answer: '104743', description: `function prostoe2(num: number){
  if (num == 2){
    return true;
  }
  if (num%2==0){
    return false;
  }
  if (num == 1){
    return false;
  }

  for(let i = 3; i<=Math.sqrt(num); i+=2){
    if(num%i==0){
      return false;
    }
  }
  return true;
}

let cnt = 0;

for(let i = 2; i<1000000; i++){
  if(prostoe2(i)){
    cnt+=1
  }
  if(cnt == 10001){
    console.log(i);
    break;
  }
}
`

  },
  { id: 8, title: "Largest Product in a Series", 
    text: `The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?`, 
    answer: '23514624000', description: `let chislo = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450';

let maxi = 0;

for(let i = 0; i<=chislo.length-13; i++){
  let sum = 1;
  for(let j = 0; j<13; j++){
    if(+chislo[i+j] == 0){
      sum = 0;
      break
    }
    sum *= +chislo[i+j];
  }
  
  if(maxi<sum){
    maxi = sum;
  }
  
}

console.log(maxi);`

  },
  { id: 9, title: "Special Pythagorean Triplet", 
    text: `A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
a² + b² = c²
For example, 3² + 4² = 9 + 16 = 25 = 5².
There exists exactly one Pythagorean triplet for which a + b + c = 1000.
Find the product abc.`, 
    answer: '31875000', description: `for(let a = 1; a<=4000; a++){
  for(let b = 1; b<=4000; b++){
    for(let c = 1; c<=4000; c++){
      if(a**2+b**2==c**2 && a+b+c==1000){
        console.log(a*b*c);
      }
    }
  }
}`

  },
  { id: 10, title: "Summation of Primes", 
    text: `The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
Find the sum of all the primes below two million.`, 
    answer: '142913828922', description: `function prostoe3(num: number){
  if (num == 2){
    return true;
  }
  if (num%2==0){
    return false;
  }
  if (num == 1){
    return false;
  }

  for(let i = 3; i<=Math.sqrt(num); i+=2){
    if(num%i==0){
      return false;
    }
  }
  return true;
}
let sum = 0;

for(let i=1; i<=2000000; i++){
  if(prostoe3(i)){
    sum += i;
  }
}

console.log(sum);
`

  }
];